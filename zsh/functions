# Add an alias to zsh/extra, so that it's not version controlled and can
# be used in a workstation-specific way.
add-alias() {
  echo "alias $1=\"$2\"" >> "$DOTFILES/zsh/extra"
  source ~/.zshrc
}


# Create a directory and cd into it.
md() {
  mkdir -p "$1" && cd "$1"
}


# Bring a branch to the current branch.
# This functions checkouts to $1 and does a rebase against the current branch.
# Then it checkouts back to the current branch.
# If no arguments are passed, it rebases master.
bring-branch-here() {
  # Save the current branch.
  local _current_branch=$(git symbolic-ref -q HEAD | sed -e 's|^refs/heads/||')
  local _target_branch=''

  if [[ -z $1 ]]; then
    _target_branch='master'
  else
    _target_branch=$1
  fi

  command git checkout $_target_branch

  # Rebase $1 against the current branch and checkout back.
  command git rebase $_current_branch
  command git checkout $_current_branch
}

# Open a file with $EDITOR in a vertical tmux pane.
# Usage:
# $ vt file.rb
vp() {
  # Exit if tmux is not installed.
  if ! type tmux >/dev/null 2>&1; then
    echo "Sorry, I couldn't find tmux."
    return 1
  fi

  # If we aren't in a tmux session, exit.
  if [[ -z $TMUX ]]; then
    echo "Sorry, you don't appear to be in a tmux session."
    return 1
  fi

  _pwd=$(pwd)

  tmux split-window -h
  tmux send-keys "cd $_pwd" C-m
  tmux send-keys "$EDITOR $1" C-m
}


# Use git in a cooler way: 'g' for status, g {args} for normal git.
# 'compdef' ensures the same git completion works when using 'g' too.
compdef g=git
g() {
  if [[ $# > 0 ]]; then
    command git $@
  else
    command git status
  fi
}

# Refuse to ssh into a remote machine if running inside tmux. This is to avoid
# having a remote tmux session inside a local tmux session (two status bars?
# wtf?).
ssh() {
  # We're inside a tmux session.
  if [[ -n $TMUX ]]; then
    echo "First exit from the current tmux session. No one likes two status bars."
    echo "Just 'command ssh ...' if you want to f**k this."
  else
    command ssh $@
  fi
}
