# Create a new directory and enter it
function md() {
	mkdir -p "$@" && cd "$@"
}


# Sublime Text 2 shorthand
# open the argument directory in Sublime Text 2;
# if there's a *.sublime-project inside that directory, open that project
function slt() {
	path="$1"

	# check if $path is a directory
	if [[ -d "$path" ]]; then
		# if it is, check for a *.sublime-project file; if there's such file, open it
		for f in `ls -A "$path"`; do
			if [[ $f =~ .*\.sublime-project ]]; then
				open -a "Sublime Text" "$path/$f"
				return 0
			fi
		done
	fi

	# check if the specified path does not exist, create new file with
	# that path and open in in Sublime
	if [ ! -d "$path" ] && [ ! -f "$path" ]; then
		touch "$path"
		slt "$path"
	fi

	# there exists such a file/directory, so just open it
	open -a "Sublime Text" "$path"
}

# creates a new directory at the specified path, initializing a new Sublime Text
# project in it (and opening Sublime too)
function slt-project() {
	projectpath=$1
	if [ -d "$projectpath" ]; then
		echo "sublime-project: that directory already exists ($projectpath)"
		return 1
	fi
	mkdir -pv "$projectpath" && cd "$projectpath"
	projectname="`basename "$PWD"`"
	cat "$DOTFILES/sublime/sublime-project-template" > "$projectname.sublime-project"
	open -a "Sublime Text 2" .
	return 0
}

# cd into whatever is the forefront Finder window.
cdf() {  # short for cdfinder
  cd "`osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)'`"
}


# wraps the argument file inside a directory with the same name (without extension)
function wrappadir() {
	path=$(dirname "$1")
	filename=$(basename "$1")
	newdirname="${filename%.*}" # cutting off the extension
	mkdir "$path/$newdirname"
	mv "$1" "$path/$newdirname"
}


# Use the zeus gem if available when calling rspec or rails
# (stolen from https://github.com/thoughtbot/dotfiles)
function rake() {
  if [ -S .zeus.sock ]; then
    command zeus rake "$@"
  else
    command rake "$@"
  fi
}


# creates a temporary dir inside $USRTMPDIR (defined in .exports)
# passing "clean" to this function removes all the previously generated dirs
# in $USTTMPDIR; passing nothing creates a dir with a 5 digits name (part of a timestamp)
# WARNING: using `ontheflydir clean` removes folders in $USRTMPDIR based on a regexp,
# so avoid calling directories with 5 digits names
function tmpdir() {
	cd "$USRTMPDIR"
	if [[ "$1" == "clean" ]]; then
		IFSBKP=$IFS; IFS=$(echo -en "\n\b")
		for d in `ls`; do
			if [[ $d =~ [0-9]{5} ]]; then
				rm -r "$d"
				echo "rm: $USRTMPDIR/$d"
			fi
		done
		IFS=$IFSBKP
		return 0
	fi

	timestamp=`date +%s`
	rnd_numbers=${timestamp:5}
	newdir="$USRTMPDIR/$rnd_numbers"
	if [ -d "$newdir" ]; then
		ontheflydir
	fi
	mkdir -v "$newdir" && cd "$newdir"
	open -g .
	return 0
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}"
	open "http://localhost:${port}/"
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# git log with per-commit cmd-clickable GitHub URLs (iTerm)
function gf() {
  local remote="$(git remote -v | awk '/^origin.*\(push\)$/ {print $2}')"
  [[ "$remote" ]] || return
  local user_repo="$(echo "$remote" | perl -pe 's/.*://;s/\.git$//')"
  git log $* --name-status --color | awk "$(cat <<AWK
    /^.*commit [0-9a-f]{40}/ {sha=substr(\$2,1,7)}
    /^[MA]\t/ {printf "%s\thttps://github.com/$user_repo/blob/%s/%s\n", \$1, sha, \$2; next}
    /.*/ {print \$0}
AWK
  )" | less -F
}


# Copy w/ progress
function cp_p () {
  rsync -WavP --human-readable --progress $1 $2
}


# Test if HTTP compression (RFC 2616 + SDCH) is enabled for a given URL.
# Send a fake UA string for sites that sniff it instead of using the Accept-Encoding header. (Looking at you, ajax.googleapis.com!)
function httpcompression() {
	encoding="$(curl -LIs -H 'User-Agent: Mozilla/5 Gecko' -H 'Accept-Encoding: gzip,deflate,compress,sdch' "$1" | grep '^Content-Encoding:')" && echo "$1 is encoded using ${encoding#* }" || echo "$1 is not using any encoding"
}


# Syntax-highlight JSON strings or files
function json() {
	if [ -p /dev/stdin ]; then
		# piping, e.g. `echo '{"foo":42}' | json`
		python -mjson.tool | pygmentize -l javascript
	else
		# e.g. `json '{"foo":42}'`
		python -mjson.tool <<< "$*" | pygmentize -l javascript
	fi
}


# take this repo and copy it to somewhere else minus the .git stuff.
function gitexport(){
	mkdir -p "$1"
	git archive master | tar -x -C "$1"
}


# get gzipped size
function gz() {
	echo "orig size    (bytes): "
	cat "$1" | wc -c
	echo "gzipped size (bytes): "
	gzip -c "$1" | wc -c
}


# All the dig info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer
}


# Escape UTF-8 characters into their 3-byte format
function escape() {
	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
	echo # newline
}


# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
	perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
	echo # newline
}


# Extract archives - use: extract <file>
# Based on http://dotfiles.org/~pseup/.bashrc
function extract() {
	if [ -f "$1" ] ; then
		local filename=$(basename "$1")
		local foldername="${filename%%.*}"
		local fullpath=`perl -e 'use Cwd "abs_path";print abs_path(shift)' "$1"`
		local didfolderexist=false
		if [ -d "$foldername" ]; then
			didfolderexist=true
			read -p "$foldername already exists, do you want to overwrite it? (y/n) " -n 1
			echo
			if [[ $REPLY =~ ^[Nn]$ ]]; then
				return
			fi
		fi
		mkdir -p "$foldername" && cd "$foldername"
		case $1 in
			*.tar.bz2) tar xjf "$fullpath" ;;
			*.tar.gz) tar xzf "$fullpath" ;;
			*.tar.xz) tar Jxvf "$fullpath" ;;
			*.tar.Z) tar xzf "$fullpath" ;;
			*.tar) tar xf "$fullpath" ;;
			*.taz) tar xzf "$fullpath" ;;
			*.tb2) tar xjf "$fullpath" ;;
			*.tbz) tar xjf "$fullpath" ;;
			*.tbz2) tar xjf "$fullpath" ;;
			*.tgz) tar xzf "$fullpath" ;;
			*.txz) tar Jxvf "$fullpath" ;;
			*.zip) unzip "$fullpath" ;;
			*) echo "'$1' cannot be extracted via extract()" && cd .. && ! $didfolderexist && rm -r "$foldername" ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}
